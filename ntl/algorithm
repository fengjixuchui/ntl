#pragma once

#include "iterator"

namespace ntl {

#pragma region lower_bound

    template<class I, class T>
    I lower_bound(I first, I last, const T& value) {
        I it;
        typename iterator_traits<I>::difference_type count, step;
        count = distance(first, last);
        while (count > 0) {
            it = first;
            step = count / 2;
            advance(it, step);
            if (*it < value) {
                first = ++it;
                count -= step + 1;
            }
            else {
                count = step;
            }
        }
        return first;
    }

    template<class I, class T, class BinaryPredicate>
    I lower_bound(I first, I last, const T& value, BinaryPredicate p) {
        I it;
        typename iterator_traits<I>::difference_type count, step;
        count = distance(first, last);
        while (count > 0) {
            it = first;
            step = count / 2;
            advance(it, step);
            if (p(*it, value)) {
                first = ++it;
                count -= step + 1;
            }
            else {
                count = step;
            }
        }
        return first;
    }

#pragma endregion
#pragma region upper_bound

    template<class I, class T>
    I upper_bound(I first, I last, const T& value) {
        I it;
        typename iterator_traits<I>::difference_type count, step;
        count = distance(first, last);
        while (count > 0) {
            it = first;
            step = count / 2;
            advance(it, step);
            if (!(value < *it)) {
                first = ++it;
                count -= step + 1;
            }
            else {
                count = step;
            }
        }
        return first;
    }

    template<class I, class T, class BinaryPredicate>
    I upper_bound(I first, I last, const T& value, BinaryPredicate p) {
        I it;
        typename iterator_traits<I>::difference_type count, step;
        count = distance(first, last);
        while (count > 0) {
            it = first;
            step = count / 2;
            advance(it, step);
            if (!p(value, *it)) {
                first = ++it;
                count -= step + 1;
            }
            else {
                count = step;
            }
        }
        return first;
    }

#pragma endregion
#pragma region equal

    template<typename II1, typename II2>
    constexpr bool equal(II1 first1, II1 last1, II2 first2) noexcept {
        for (auto i = first1, j = first2; i != last1; ++i, ++j) {
            if (*i != *j) {
                return false;
            }
        }
        return true;
    }

    template<typename II1, typename II2, typename BinaryPredicate>
    constexpr bool equal(II1 first1, II1 last1, II2 first2, BinaryPredicate p) noexcept {
        for (auto i = first1, j = first2; i != last1; ++i, ++j) {
            if (!p(*i, *j)) {
                return false;
            }
        }
        return true;
    }

    template<typename II1, typename II2>
    constexpr bool equal(II1 first1, II1 last1, II2 first2, II2 last2) noexcept {
        for (auto i = first1, j = first2; i != last1 && j != last2; ++i, ++j) {
            if (*i != *j) {
                return false;
            }
        }
        return true;
    }

    template<typename II1, typename II2, typename BinaryPredicate>
    constexpr bool equal(II1 first1, II1 last1, II2 first2, II2 last2, BinaryPredicate p) noexcept {
        for (auto i = first1, j = first2; i != last1 && j != last2; ++i, ++j) {
            if (p(*i, *j)) {
                return false;
            }
        }
        return true;
    }

#pragma endregion
#pragma region lexicographical_compare

    template<typename II1, typename II2>
    constexpr bool lexicographical_compare(II1 first1, II1 last1, II2 first2, II2 last2) noexcept {
        for (; first1 != last1 && first2 != last2; ++first1, ++first2) {
            if (*first1 < *first2)
                return true;
            if (*first2 < *first1)
                return false;
        }
        return first1 == last1 && first2 != last2;
    }

    template<typename II1, typename II2, typename Compare>
    constexpr bool lexicographical_compare(II1 first1, II1 last1, II2 first2, II2 last2, Compare compare) noexcept {
        for (; first1 != last1 && first2 != last2; ++first1, ++first2) {
            if (compare(*first1, *first2))
                return true;
            if (compare(*first2, *first1))
                return false;
        }
        return first1 == last1 && first2 != last2;
    }

#pragma endregion

}
