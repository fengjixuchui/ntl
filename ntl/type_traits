#pragma once

#include "system"

namespace ntl {

    namespace detail {

        template<typename T>
        struct type_identity { using type = T; };

        template<typename T>
        auto try_add_lvalue_reference(int) noexcept -> type_identity<T&>;
        template<typename T>
        auto try_add_lvalue_reference(...) noexcept -> type_identity<T>;

        template<typename T>
        auto try_add_rvalue_reference(int) noexcept -> type_identity<T&&>;
        template<typename T>
        auto try_add_rvalue_reference(...) noexcept -> type_identity<T>;

    }

    template<typename T, T v>
    struct integral_constant {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; }
    };

    template<bool B>
    using bool_constant = integral_constant<bool, B>;

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    template<typename...>
    using void_t = void;

    template<typename T> struct remove_const { typedef T type; };
    template<typename T> struct remove_const<const T> { typedef T type; };

    template<typename T> struct remove_volatile { typedef T type; };
    template<typename T> struct remove_volatile<volatile T> { typedef T type; };

    template<typename T>
    using remove_const_t = typename remove_const<T>::type;

    template<typename T>
    using remove_volatile_t = typename remove_volatile<T>::type;

    template<typename T>
    struct remove_cv {
        using type = remove_volatile_t<remove_const_t<T>>;
    };

    template<typename T>
    using remove_cv_t = typename remove_cv<T>::type;

    template<typename T> struct is_pointer_helper : false_type {};
    template<typename T> struct is_pointer_helper<T*> : true_type {};
    template<typename T> struct is_pointer : is_pointer_helper<remove_cv_t<T>> {};

    template <typename T>
    struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {};

    template<typename T>
    using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

    template <typename T>
    struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {};

    template<typename T>
    using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

    template<typename T>
    typename add_rvalue_reference_t<T> declval() noexcept;

    namespace detail {

        struct one_t { char c[1]; };
        struct two_t { char c[2]; };
        template<typename T> one_t is_class_test(int T::*) noexcept;
        template<typename T> two_t is_class_test(...) noexcept;

        template<typename Base> true_type is_base_of_test(volatile const Base*) noexcept;
        template<typename Base> false_type is_base_of_test(volatile const void*) noexcept;
        template<typename Base, typename Derived>
        using pre_is_base_of = decltype(is_base_of_test<Base>(declval<Derived*>()));
        template <typename Base, typename Derived, typename = void>
        struct pre_is_base_of2 : public true_type { };
        template <typename Base, typename Derived>
        struct pre_is_base_of2<Base, Derived, void_t<pre_is_base_of<Base, Derived>>> : public pre_is_base_of<Base, Derived> { };

    }

    template<typename T>
    struct is_class
        : bool_constant<
        sizeof(detail::is_class_test<T>(0)) == sizeof(detail::one_t)
        /* && !is_union_v<T> */ // TODO
        >
    {};

    template<typename T>
    inline constexpr bool is_class_v = is_class<T>::value;

    template<typename T> struct is_lvalue_reference : false_type {};
    template<typename T> struct is_lvalue_reference<T&> : true_type {};
    template<typename T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template<bool B, typename T, typename F>
    struct conditional { using type = T; };

    template<typename T, typename F>
    struct conditional<false, T, F> { using type = F; };

    template<bool B, typename T, typename F>
    using conditional_t = typename conditional<B, T, F>::type;

    template<typename...> struct conjunction : true_type {};
    template<typename B1> struct conjunction<B1> : B1 {};
    template<typename B1, typename... Bn>
    struct conjunction<B1, Bn...>
        : conditional_t<bool(B1::value), conjunction<Bn...>, B1>
    {};

    template<typename... B>
    inline constexpr bool conjunction_v = conjunction<B...>::value;

    template<typename...> struct disjunction : false_type {};
    template<typename B1> struct disjunction<B1> : B1 {};
    template<typename B1, typename... Bn>
    struct disjunction<B1, Bn...>
        : conditional_t<bool(B1::value), B1, disjunction<Bn...>>
    {};

    template<typename... B>
    inline constexpr bool disjunction_v = disjunction<B...>::value;

    template<typename T, typename U>
    struct is_same : false_type {};

    template<typename T>
    struct is_same<T, T> : true_type {};

    template<typename T, typename U>
    inline constexpr bool is_same_v = is_same<T, U>::value;

    template<typename Base, typename Derived>
    struct is_base_of
        : public conditional_t<
        is_class_v<Base>&& is_class_v<Derived>,
        detail::pre_is_base_of2<Base, Derived>,
        false_type
        >
    {};

    template<typename Base, typename Derived>
    inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

    template<typename T>
    struct remove_reference { using type = T; };

    template<typename T>
    struct remove_reference<T&> { using type = T; };

    template<typename T>
    struct remove_reference<T&&> { using type = T; };

    template<typename T>
    using remove_reference_t = typename remove_reference<T>::type;

    template<bool B, typename T = void>
    struct enable_if {};

    template<typename T>
    struct enable_if<true, T> { using type = T; };

    template<bool B, typename T = void>
    using enable_if_t = typename enable_if<B, T>::type;

    template<typename T, typename... Ts>
    struct is_any_of : public disjunction<is_same<T, Ts>...> {};

    template<typename T, typename... Ts>
    inline constexpr bool is_any_of_v = is_any_of<T, Ts...>::value;

    template<typename T>
    struct is_integral : public is_any_of<
        remove_cv_t<T>,
        bool, char, signed char, unsigned char,
        wchar_t, char16_t, char32_t,
        short, unsigned short,
        int, unsigned int, long, unsigned long,
        long long, unsigned long long
    >
    {};

    template<typename T>
    inline constexpr bool is_integral_v = is_integral<T>::value;

    template<typename T>
    struct is_floating_point : public is_any_of<
        remove_cv_t<T>,
        float, double, long double
    >
    {};

    template<typename T>
    inline constexpr bool is_floating_point_v = is_floating_point<T>::value;
}
