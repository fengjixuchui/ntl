#pragma once

#include "system"
#include "memory"
#include "type_traits"

namespace ntl {

#pragma region iterator_tag

    struct input_iterator_tag {};
    struct output_iterator_tag {};
    struct forward_iterator_tag : public input_iterator_tag {};
    struct bidirectional_iterator_tag : public forward_iterator_tag {};
    struct random_access_iterator_tag : public bidirectional_iterator_tag {};
    struct contiguous_iterator_tag : public random_access_iterator_tag {};

#pragma endregion
#pragma region iterator_traits

    template<typename T>
    struct iterator_traits {
        using difference_type = typename T::difference_type;
        using value_type = typename T::value_type;
        using pointer = typename T::pointer;
        using reference = typename T::reference;
        using iterator_category = typename T::iterator_category;
    };

    template<typename T>
    struct iterator_traits<T*> {
        using difference_type = ptrdiff_t;
        using value_type = T;
        using pointer = T*;
        using reference = T&;
        using iterator_category = random_access_iterator_tag;
    };

    template<typename T, typename = void>
    struct is_iterator {
        static constexpr bool value = false;
    };

    template<typename T>
    struct is_iterator<T, typename enable_if<!is_same<typename iterator_traits<T>::value_type, void>::value>::type> {
        static constexpr bool value = true;
    };

    template<typename T>
    inline constexpr bool is_iterator_v = is_iterator<T>::value;

    template<typename T>
    using enable_if_is_iterator_t = enable_if_t<is_iterator_v<T>, T>;

#pragma endregion
#pragma region iterator

    template<
        typename Category,
        typename T,
        typename Distance = ntl::ptrdiff_t,
        typename Pointer = T*,
        typename Reference = T&
    >
    class iterator {
    public:
        using value_type = T;
        using difference_type = Distance;
        using pointer = Pointer;
        using reference = Reference;
        using iterator_category = Category;

        iterator(pointer p) noexcept
            : p_(p)
        {}

        constexpr operator pointer() const noexcept {
            return p_;
        }

        constexpr bool operator==(iterator const &rhs) noexcept {
            return p_ == rhs.p_;
        }

        constexpr bool operator!=(iterator const &rhs) noexcept {
            return p_ != rhs.p_;
        }

        constexpr bool operator<(iterator const &rhs) noexcept {
            return p_ < rhs.p_;
        }

        constexpr bool operator<=(iterator const &rhs) noexcept {
            return p_ <= rhs.p_;
        }

        constexpr bool operator>(iterator const &rhs) noexcept {
            return p_ > rhs.p_;
        }

        constexpr bool operator>=(iterator const &rhs) noexcept {
            return p_ >= rhs.p_;
        }

    protected:
        pointer p_;
    };

#pragma endregion
#pragma region random_access_iterator

    template<
        typename T,
        typename Distance = ntl::ptrdiff_t,
        typename Pointer = T*,
        typename Reference = T&
    >
    class random_access_iterator
        : public iterator<
            random_access_iterator_tag,
            T,
            Distance,
            Pointer,
            Reference
        >
    {
    public:
        constexpr random_access_iterator() noexcept
            : iterator(nullptr)
        {}

        constexpr random_access_iterator(Pointer x) noexcept
            : iterator(x)
        {}

        constexpr random_access_iterator(random_access_iterator const &other) noexcept
            : iterator<random_access_iterator_tag, T, Distance, Pointer, Reference>(other.p_)
        {}

        constexpr random_access_iterator& operator=(random_access_iterator const &other) noexcept {
            p_ = other.p_;
            return *this;
        }

        constexpr operator random_access_iterator<T const, Distance, T const*, T const&>() const noexcept {
            return p_;
        }

        constexpr T& operator*() const noexcept {
            return *p_;
        }

        constexpr Pointer operator->() const noexcept {
            return p_;
        }

        constexpr T& operator[](Distance n) const noexcept {
            return p_[n];
        }

        constexpr random_access_iterator& operator++() noexcept {
            ++p_;
            return *this;
        }

        constexpr random_access_iterator& operator--() noexcept {
            --p_;
            return *this;
        }

        constexpr random_access_iterator operator++(int) noexcept {
            auto t = p_;
            ++p_;
            return t;
        }

        constexpr random_access_iterator operator--(int) noexcept {
            auto t = p_;
            --p_;
            return t;
        }

        constexpr random_access_iterator operator+(Distance n) const noexcept {
            return p_ + n;
        }

        constexpr random_access_iterator operator-(Distance n) const noexcept {
            return p_ - n;
        }

        constexpr random_access_iterator& operator+=(Distance n) noexcept {
            p_ += n;
            return *this;
        }

        constexpr random_access_iterator& operator-=(Distance n) noexcept {
            p_ -= n;
            return *this;
        }
    };

#pragma endregion
#pragma region reverse_iterator

    template<typename I>
    class reverse_iterator {
    public:
        using iterator_type = I;
        using iterator_category = typename ntl::iterator_traits<iterator_type>::iterator_category;
        using value_type = typename ntl::iterator_traits<iterator_type>::value_type;
        using difference_type = typename ntl::iterator_traits<iterator_type>::difference_type;
        using pointer = typename ntl::iterator_traits<iterator_type>::pointer;
        using reference = typename ntl::iterator_traits<iterator_type>::reference;

        constexpr reverse_iterator() noexcept {}
        constexpr reverse_iterator(iterator_type x) noexcept {
            base_ = x;
        }

        constexpr reverse_iterator(reverse_iterator const &other) noexcept
            : base_(other.base_)
        {}

        constexpr reverse_iterator& operator=(reverse_iterator const &other) noexcept {
            base_ = other.base_;
        }

        constexpr iterator_type base() const noexcept {
            return base_;
        }

        constexpr reference operator*() const noexcept {
            return *(base_ - 1);
        }

        constexpr pointer operator->() const noexcept {
            return ntl::addressof(operator*());
        }

        constexpr value_type& operator[](difference_type n) const noexcept {
            return base_[-n - 1];
        }


        constexpr reverse_iterator& operator++() noexcept {
            --base_;
            return *this;
        }

        constexpr reverse_iterator& operator--() noexcept {
            ++base_;
            return *this;
        }

        constexpr reverse_iterator operator++(int) noexcept {
            auto t = base_;
            --base_;
            return t;
        }

        constexpr reverse_iterator operator--(int) noexcept {
            auto t = base_;
            ++base_;
            return t;
        }

        constexpr reverse_iterator operator+(difference_type n) const noexcept {
            return base() - n;
        }

        constexpr reverse_iterator operator-(difference_type n) const noexcept {
            return base() + n;
        }

        constexpr reverse_iterator& operator+=(difference_type n) noexcept {
            base_ -= n;
            return *this;
        }

        constexpr reverse_iterator& operator-=(difference_type n) noexcept {
            base_ += n;
            return *this;
        }

    protected:
        iterator_type base_;
    };


    template<typename I1, typename I2>
    constexpr bool operator==(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() == rhs.base();
    }

    template<typename I1, typename I2>
    constexpr bool operator!=(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() != rhs.base();
    }

    template<typename I1, typename I2>
    constexpr bool operator<(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() < rhs.base();
    }

    template<typename I1, typename I2>
    constexpr bool operator<=(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() <= rhs.base();
    }

    template<typename I1, typename I2>
    constexpr bool operator>(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() > rhs.base();
    }

    template<typename I1, typename I2>
    constexpr bool operator>=(reverse_iterator<I1> const &lhs, reverse_iterator<I2> const &rhs) noexcept {
        return lhs.base() >= rhs.base();
    }

#pragma endregion
#pragma region operations

    namespace detail {
        template<class I>
        constexpr void do_advance(I& it, typename iterator_traits<I>::difference_type n, input_iterator_tag) {
            while (n > 0) {
                --n;
                ++it;
            }
        }

        template<class I>
        constexpr void do_advance(I& it, typename iterator_traits<I>::difference_type n, bidirectional_iterator_tag) {
            while (n > 0) {
                --n;
                ++it;
            }
            while (n < 0) {
                ++n;
                --it;
            }
        }

        template<class I>
        constexpr void do_advance(I& it, typename iterator_traits<I>::difference_type n, random_access_iterator_tag) {
            it += n;
        }

    }

    template<class I, class D>
    constexpr void advance(I& it, D n) {
        detail::do_advance(it,
                           typename iterator_traits<I>::difference_type(n),
                           typename iterator_traits<I>::iterator_category());
    }

    template<typename II>
    constexpr typename iterator_traits<II>::difference_type distance(II first, II last) noexcept {
        if constexpr (is_same_v<random_access_iterator_tag, typename iterator_traits<II>::iterator_category>) {
            return last - first;
        }
        else {
            static_assert(
                is_same_v<random_access_iterator_tag, typename iterator_traits<II>::iterator_category>,
                "TODO: support more types in ntl::distance"
                );
        }
    }

#pragma endregion

}
